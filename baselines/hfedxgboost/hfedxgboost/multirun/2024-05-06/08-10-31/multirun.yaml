hydra:
  run:
    dir: outputs/${now:%Y-%m-%d}/${now:%H-%M-%S}
  sweep:
    dir: multirun/${now:%Y-%m-%d}/${now:%H-%M-%S}
    subdir: ${hydra.job.num}
  launcher:
    _target_: hydra._internal.core_plugins.basic_launcher.BasicLauncher
  sweeper:
    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
    max_batch_size: null
    params: null
  help:
    app_name: ${hydra.job.name}
    header: '${hydra.help.app_name} is powered by Hydra.

      '
    footer: 'Powered by Hydra (https://hydra.cc)

      Use --hydra-help to view Hydra specific help

      '
    template: '${hydra.help.header}

      == Configuration groups ==

      Compose your configuration from those groups (group=option)


      $APP_CONFIG_GROUPS


      == Config ==

      Override anything in the config (foo.bar=value)


      $CONFIG


      ${hydra.help.footer}

      '
  hydra_help:
    template: 'Hydra (${hydra.runtime.version})

      See https://hydra.cc for more info.


      == Flags ==

      $FLAGS_HELP


      == Configuration groups ==

      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
      to command line)


      $HYDRA_CONFIG_GROUPS


      Use ''--cfg hydra'' to Show the Hydra config.

      '
    hydra_help: ???
  hydra_logging:
    version: 1
    formatters:
      simple:
        format: '[%(asctime)s][HYDRA] %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: simple
        stream: ext://sys.stdout
    root:
      level: INFO
      handlers:
      - console
    loggers:
      logging_example:
        level: DEBUG
    disable_existing_loggers: false
  job_logging:
    version: 1
    formatters:
      simple:
        format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: simple
        stream: ext://sys.stdout
      file:
        class: logging.FileHandler
        formatter: simple
        filename: ${hydra.runtime.output_dir}/${hydra.job.name}.log
    root:
      level: INFO
      handlers:
      - console
      - file
    disable_existing_loggers: false
  env: {}
  mode: MULTIRUN
  searchpath: []
  callbacks: {}
  output_subdir: .hydra
  overrides:
    hydra:
    - hydra.mode=MULTIRUN
    task:
    - clients=a9a_2_clients,a9a_5_clients,a9a_10_clients
    - dataset=a9a
  job:
    name: main
    chdir: null
    override_dirname: clients=a9a_2_clients,a9a_5_clients,a9a_10_clients,dataset=a9a
    id: ???
    num: ???
    config_name: base
    env_set: {}
    env_copy: []
    config:
      override_dirname:
        kv_sep: '='
        item_sep: ','
        exclude_keys: []
  runtime:
    version: 1.3.2
    version_base: '1.3'
    cwd: /root/flower/baselines/hfedxgboost/hfedxgboost
    config_sources:
    - path: hydra.conf
      schema: pkg
      provider: hydra
    - path: /root/flower/baselines/hfedxgboost/hfedxgboost/conf
      schema: file
      provider: main
    - path: ''
      schema: structured
      provider: schema
    output_dir: ???
    choices:
      wandb: default
      clients: cpusmall_5_clients
      dataset: a9a
      dataset/task: Binary_Classification
      hydra/env: default
      hydra/callbacks: null
      hydra/job_logging: default
      hydra/hydra_logging: default
      hydra/hydra_help: default
      hydra/help: default
      hydra/sweeper: basic
      hydra/launcher: basic
      hydra/output: default
  verbose: false
dataset:
  task:
    task_type: BINARY
    metric:
      name: Accuracy
      fn:
        _target_: torchmetrics.Accuracy
        task: binary
    criterion:
      _target_: torch.nn.BCELoss
    xgb:
      _target_: xgboost.XGBClassifier
      objective: binary:logistic
  dataset_name: a9a
  train_ratio: 0.75
  early_stop_patience_rounds: 10
clients:
  n_estimators_client: 25
  num_rounds: 500
  client_num: 5
  num_iterations: 100
  xgb:
    max_depth: 6
  CNN:
    lr: 0.000457414512764587
wandb:
  setup:
    project: p1
    mode: online
  watch:
    log: all
    log_freq: 100
centralized: false
use_wandb: false
show_each_client_performance_on_its_local_data: false
val_ratio: 0.0
batch_size: whole
n_estimators_client: ${clients.n_estimators_client}
task_type: ${dataset.task.task_type}
client_num: ${clients.client_num}
XGBoost:
  _target_: ${dataset.task.xgb._target_}
  objective: ${dataset.task.xgb.objective}
  learning_rate: 0.1
  max_depth: ${clients.xgb.max_depth}
  n_estimators: ${clients.n_estimators_client}
  subsample: 0.8
  colsample_bylevel: 1
  colsample_bynode: 1
  colsample_bytree: 1
  alpha: 5
  gamma: 5
  num_parallel_tree: 1
  min_child_weight: 1
server:
  max_workers: None
  device: cpu
client_resources:
  num_cpus: 1
  num_gpus: 0.0
strategy:
  _target_: hfedxgboost.strategy.FedXgbNnAvg
  _recursive_: true
  fraction_fit: 1.0
  fraction_evaluate: 0.0
  min_fit_clients: 1
  min_evaluate_clients: 1
  min_available_clients: ${client_num}
  accept_failures: false
run_experiment:
  num_rounds: ${clients.num_rounds}
  batch_size: 32
  fraction_fit: 1.0
  min_fit_clients: 1
  fit_config:
    num_iterations: ${clients.num_iterations}
